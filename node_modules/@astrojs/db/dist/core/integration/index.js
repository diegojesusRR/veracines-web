import { existsSync } from "fs";
import { dirname } from "path";
import { fileURLToPath } from "url";
import { mkdir, writeFile } from "fs/promises";
import { blue, yellow } from "kleur/colors";
import parseArgs from "yargs-parser";
import { CONFIG_FILE_NAMES, DB_PATH } from "../consts.js";
import { resolveDbConfig } from "../load-file.js";
import { getManagedAppTokenOrExit } from "../tokens.js";
import { getDbDirectoryUrl } from "../utils.js";
import { fileURLIntegration } from "./file-url.js";
import { typegenInternal } from "./typegen.js";
import { vitePluginDb } from "./vite-plugin-db.js";
import { vitePluginInjectEnvTs } from "./vite-plugin-inject-env-ts.js";
function astroDBIntegration() {
  let connectToStudio = false;
  let configFileDependencies = [];
  let root;
  let appToken;
  let tables = {
    get() {
      throw new Error("[astro:db] INTERNAL Tables not loaded yet");
    }
  };
  let seedFiles = {
    get() {
      throw new Error("[astro:db] INTERNAL Seed files not loaded yet");
    }
  };
  let command;
  return {
    name: "astro:db",
    hooks: {
      "astro:config:setup": async ({ updateConfig, config, command: _command, logger }) => {
        command = _command;
        root = config.root;
        if (command === "preview")
          return;
        let dbPlugin = void 0;
        const args = parseArgs(process.argv.slice(3));
        connectToStudio = process.env.ASTRO_INTERNAL_TEST_REMOTE || args["remote"];
        if (connectToStudio) {
          appToken = await getManagedAppTokenOrExit();
          dbPlugin = vitePluginDb({
            connectToStudio,
            appToken: appToken.token,
            tables,
            root: config.root,
            srcDir: config.srcDir
          });
        } else {
          dbPlugin = vitePluginDb({
            connectToStudio: false,
            tables,
            seedFiles,
            root: config.root,
            srcDir: config.srcDir
          });
        }
        updateConfig({
          vite: {
            assetsInclude: [DB_PATH],
            plugins: [dbPlugin, vitePluginInjectEnvTs(config, logger)]
          }
        });
      },
      "astro:config:done": async ({ config }) => {
        if (command === "preview")
          return;
        const { dbConfig, dependencies, integrationSeedPaths } = await resolveDbConfig(config);
        tables.get = () => dbConfig.tables;
        seedFiles.get = () => integrationSeedPaths;
        configFileDependencies = dependencies;
        const localDbUrl = new URL(DB_PATH, config.root);
        if (!connectToStudio && !existsSync(localDbUrl)) {
          await mkdir(dirname(fileURLToPath(localDbUrl)), { recursive: true });
          await writeFile(localDbUrl, "");
        }
        await typegenInternal({ tables: tables.get() ?? {}, root: config.root });
      },
      "astro:server:start": async ({ logger }) => {
        setTimeout(() => {
          logger.info(
            connectToStudio ? "Connected to remote database." : "New local database created."
          );
        }, 100);
      },
      "astro:server:setup": async ({ server }) => {
        const filesToWatch = [
          ...CONFIG_FILE_NAMES.map((c) => new URL(c, getDbDirectoryUrl(root))),
          ...configFileDependencies.map((c) => new URL(c, root))
        ];
        server.watcher.on("all", (event, relativeEntry) => {
          const entry = new URL(relativeEntry, root);
          if (filesToWatch.some((f) => entry.href === f.href)) {
            server.restart();
          }
        });
      },
      "astro:build:start": async ({ logger }) => {
        logger.info("database: " + (connectToStudio ? yellow("remote") : blue("local database.")));
      },
      "astro:build:done": async ({}) => {
        await appToken?.destroy();
      }
    }
  };
}
function integration() {
  return [astroDBIntegration(), fileURLIntegration()];
}
export {
  integration
};
