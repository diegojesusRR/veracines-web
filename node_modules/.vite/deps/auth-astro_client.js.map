{
  "version": 3,
  "sources": ["../../auth-astro/client.ts"],
  "sourcesContent": ["import type {\n\tLiteralUnion,\n\tSignInOptions,\n\tSignInAuthorizationParams,\n\tSignOutParams,\n} from 'next-auth/react'\nimport type { BuiltInProviderType, RedirectableProviderType } from '@auth/core/providers'\n\ninterface AstroSignInOptions extends SignInOptions {\n\t/** The base path for authentication (default: /api/auth) */\n\tprefix?: string\n}\n\ninterface AstroSignOutParams extends SignOutParams {\n\t/** The base path for authentication (default: /api/auth) */\n\tprefix?: string\n}\n\n/**\n * Client-side method to initiate a signin flow\n * or send the user to the signin page listing all possible providers.\n * Automatically adds the CSRF token to the request.\n *\n * [Documentation](https://authjs.dev/reference/utilities/#signin)\n */\nexport async function signIn<P extends RedirectableProviderType | undefined = undefined>(\n\tproviderId?: LiteralUnion<\n\t\tP extends RedirectableProviderType ? P | BuiltInProviderType : BuiltInProviderType\n\t>,\n\toptions?: AstroSignInOptions,\n\tauthorizationParams?: SignInAuthorizationParams\n) {\n\tconst { callbackUrl = window.location.href, redirect = true } = options ?? {}\n\tconst { prefix = '/api/auth', ...opts } = options ?? {}\n\n\t// TODO: Support custom providers\n\tconst isCredentials = providerId === 'credentials'\n\tconst isEmail = providerId === 'email'\n\tconst isSupportingReturn = isCredentials || isEmail\n\n\t// TODO: Handle custom base path\n\tconst signInUrl = `${prefix}/${isCredentials ? 'callback' : 'signin'}/${providerId}`\n\n\tconst _signInUrl = `${signInUrl}?${new URLSearchParams(authorizationParams)}`\n\n\t// TODO: Handle custom base path\n\tconst csrfTokenResponse = await fetch(`${prefix}/csrf`)\n\tconst { csrfToken } = await csrfTokenResponse.json()\n\n\tconst res = await fetch(_signInUrl, {\n\t\tmethod: 'post',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t'X-Auth-Return-Redirect': '1',\n\t\t},\n\t\t// @ts-expect-error -- ignore\n\t\tbody: new URLSearchParams({\n\t\t\t...opts,\n\t\t\tcsrfToken,\n\t\t\tcallbackUrl,\n\t\t}),\n\t})\n\n\tconst data = await res.clone().json()\n\tconst error = new URL(data.url).searchParams.get('error')\n\n\tif (redirect || !isSupportingReturn || !error) {\n\t\t// TODO: Do not redirect for Credentials and Email providers by default in next major\n\t\twindow.location.href = data.url ?? callbackUrl\n\t\t// If url contains a hash, the browser does not reload the page. We reload manually\n\t\tif (data.url.includes('#')) window.location.reload()\n\t\treturn\n\t}\n\n\treturn res\n}\n\n/**\n * Signs the user out, by removing the session cookie.\n * Automatically adds the CSRF token to the request.\n *\n * [Documentation](https://authjs.dev/reference/utilities/#signout)\n */\nexport async function signOut(options?: AstroSignOutParams) {\n\tconst { callbackUrl = window.location.href, prefix = '/api/auth' } = options ?? {}\n\t// TODO: Custom base path\n\tconst csrfTokenResponse = await fetch(`${prefix}/csrf`)\n\tconst { csrfToken } = await csrfTokenResponse.json()\n\tconst res = await fetch(`${prefix}/signout`, {\n\t\tmethod: 'post',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t'X-Auth-Return-Redirect': '1',\n\t\t},\n\t\tbody: new URLSearchParams({\n\t\t\tcsrfToken,\n\t\t\tcallbackUrl,\n\t\t}),\n\t})\n\tconst data = await res.json()\n\n\tconst url = data.url ?? callbackUrl\n\twindow.location.href = url\n\t// If url contains a hash, the browser does not reload the page. We reload manually\n\tif (url.includes('#')) window.location.reload()\n}\n"],
  "mappings": ";;;AAyBA,eAAsB,OACrB,YAGA,SACA,qBACC;AACD,QAAM,EAAE,cAAc,OAAO,SAAS,MAAM,WAAW,KAAK,IAAI,WAAW,CAAC;AAC5E,QAAM,EAAE,SAAS,aAAa,GAAG,KAAK,IAAI,WAAW,CAAC;AAGtD,QAAM,gBAAgB,eAAe;AACrC,QAAM,UAAU,eAAe;AAC/B,QAAM,qBAAqB,iBAAiB;AAG5C,QAAM,YAAY,GAAG,MAAM,IAAI,gBAAgB,aAAa,QAAQ,IAAI,UAAU;AAElF,QAAM,aAAa,GAAG,SAAS,IAAI,IAAI,gBAAgB,mBAAmB,CAAC;AAG3E,QAAM,oBAAoB,MAAM,MAAM,GAAG,MAAM,OAAO;AACtD,QAAM,EAAE,UAAU,IAAI,MAAM,kBAAkB,KAAK;AAEnD,QAAM,MAAM,MAAM,MAAM,YAAY;AAAA,IACnC,QAAQ;AAAA,IACR,SAAS;AAAA,MACR,gBAAgB;AAAA,MAChB,0BAA0B;AAAA,IAC3B;AAAA;AAAA,IAEA,MAAM,IAAI,gBAAgB;AAAA,MACzB,GAAG;AAAA,MACH;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AAED,QAAM,OAAO,MAAM,IAAI,MAAM,EAAE,KAAK;AACpC,QAAM,QAAQ,IAAI,IAAI,KAAK,GAAG,EAAE,aAAa,IAAI,OAAO;AAExD,MAAI,YAAY,CAAC,sBAAsB,CAAC,OAAO;AAE9C,WAAO,SAAS,OAAO,KAAK,OAAO;AAEnC,QAAI,KAAK,IAAI,SAAS,GAAG;AAAG,aAAO,SAAS,OAAO;AACnD;AAAA,EACD;AAEA,SAAO;AACR;AAQA,eAAsB,QAAQ,SAA8B;AAC3D,QAAM,EAAE,cAAc,OAAO,SAAS,MAAM,SAAS,YAAY,IAAI,WAAW,CAAC;AAEjF,QAAM,oBAAoB,MAAM,MAAM,GAAG,MAAM,OAAO;AACtD,QAAM,EAAE,UAAU,IAAI,MAAM,kBAAkB,KAAK;AACnD,QAAM,MAAM,MAAM,MAAM,GAAG,MAAM,YAAY;AAAA,IAC5C,QAAQ;AAAA,IACR,SAAS;AAAA,MACR,gBAAgB;AAAA,MAChB,0BAA0B;AAAA,IAC3B;AAAA,IACA,MAAM,IAAI,gBAAgB;AAAA,MACzB;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AACD,QAAM,OAAO,MAAM,IAAI,KAAK;AAE5B,QAAM,MAAM,KAAK,OAAO;AACxB,SAAO,SAAS,OAAO;AAEvB,MAAI,IAAI,SAAS,GAAG;AAAG,WAAO,SAAS,OAAO;AAC/C;",
  "names": []
}
